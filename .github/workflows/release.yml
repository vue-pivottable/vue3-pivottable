name: Release (Simplified)

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.10.0'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Run quality checks
        run: |
          echo "Running type checks..."
          pnpm typecheck
          pnpm -r typecheck || true
          
          echo "Running linting..."
          pnpm lint
          pnpm -r lint || true
          
      - name: Build packages
        run: |
          echo "Building all packages..."
          pnpm build:all

      - name: Check beta versions
        id: check-versions
        run: |
          # Check if packages have beta versions
          MAIN_VERSION=$(node -p "require('./package.json').version")
          if [[ $MAIN_VERSION == *"-beta"* ]]; then
            echo "has_beta=true" >> $GITHUB_OUTPUT
            # Extract base version without beta suffix
            BASE_VERSION=$(echo $MAIN_VERSION | sed 's/-beta.*//')
            echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "has_beta=false" >> $GITHUB_OUTPUT
          fi

      - name: Update versions to stable
        if: steps.check-versions.outputs.has_beta == 'true'
        run: |
          # Update main package
          npm version ${{ steps.check-versions.outputs.base_version }} --no-git-tag-version
          
          # Update sub-packages
          for pkg in packages/*/; do
            if [ -d "$pkg" ] && [ -f "$pkg/package.json" ]; then
              cd "$pkg"
              PKG_VERSION=$(node -p "require('./package.json').version")
              if [[ $PKG_VERSION == *"-beta"* ]]; then
                PKG_BASE=$(echo $PKG_VERSION | sed 's/-beta.*//')
                npm version $PKG_BASE --no-git-tag-version
              fi
              cd -
            fi
          done

      - name: Create release branch
        id: create-release
        if: steps.check-versions.outputs.has_beta == 'true'
        run: |
          VERSION=${{ steps.check-versions.outputs.base_version }}
          RELEASE_BRANCH="release/v${VERSION}"
          
          git checkout -b $RELEASE_BRANCH
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: release v${VERSION}" || echo "No changes"
          git push origin $RELEASE_BRANCH
          
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout release branch and publish
        if: steps.check-versions.outputs.has_beta == 'true'
        run: |
          # Checkout to release branch for publishing
          git checkout ${{ steps.create-release.outputs.release_branch }}
          
          # Publish with latest tag (overwrites beta)
          node scripts/release-packages.cjs
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN_SUMIN: ${{ secrets.NPM_TOKEN_SUMIN }}

      - name: Create GitHub Release
        if: steps.check-versions.outputs.has_beta == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.create-release.outputs.version }}
          release_name: Release v${{ steps.create-release.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## ðŸš€ Stable Release
            
            This release promotes the beta version to stable.
            
            Install with: `npm install vue-pivottable@latest`

      - name: Create PR to update main
        if: steps.check-versions.outputs.has_beta == 'true'
        run: |
          # Create PR from release branch back to main
          gh pr create \
            --base main \
            --head ${{ steps.create-release.outputs.release_branch }} \
            --title "chore: update main with release v${{ steps.create-release.outputs.version }}" \
            --body "## ðŸ“¦ Release Update
            
            This PR updates main branch with:
            - âœ… Stable version numbers (beta suffix removed)
            - âœ… Updated package.json files
            - âœ… Release commit
            
            **Note**: Changesets were already consumed in develop branch." \
            || echo "PR creation failed"
          
          # Also create PR to sync with develop
          gh pr create \
            --base develop \
            --head ${{ steps.create-release.outputs.release_branch }} \
            --title "chore: sync release v${{ steps.create-release.outputs.version }} to develop" \
            --body "## ðŸ”„ Release Sync
            
            This PR syncs the stable release back to develop:
            - âœ… Version alignment
            - âœ… Ensures develop has latest stable version
            
            **Important**: Review carefully for any conflicts with ongoing development." \
            || echo "Sync PR creation failed"